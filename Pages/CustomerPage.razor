@page "/customer/{customerId}"
@inject NavigationManager Navigation
@using System;
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json.Serialization;
    <div class="container mt-4 p-4 w-75 ">
              <ul class="breadcrumb" aria-label="bread-crumb">
  <li><NavLink href="/" class="nav" Match="NavLinkMatch.All">Hem</NavLink></li>

  <li><NavLink href="/login">Logga in</NavLink></li>
  <li>Mina sidor</li>
</ul>
        <p class="citat text-center">Välkommen @customer.Name</p>
        <h1 class="mb-4">Mina sidor</h1>
   

<section class="mt-4 pt-4" >
    <h2 class="mb-4">Bokningsinformation</h2>
@if (customer != null)
{
    <p> <strong> Namn:</strong> @customer.Name</p>
    <p> <strong>Epost:</strong> @customer.Email</p>

    @if (customer.Bookings != null && customer.Bookings.Values != null && customer.Bookings.Values.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Bookings datum</th>
                    <th>Message</th>
                    <th>Hårlängd</th>
                    <th>Hårtyp</th>
               <th>Hantera</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in customer.Bookings.Values)
                {
                    <tr>
                        <td>@booking.Time.Date.ToString("yyyy-MM-dd")  kl @booking.Time.Time</td>
                        <td>@booking.Message</td>
                        <td>@booking.HairLength</td>
                        <td>@booking.HairType</td>
                          <td>
                            <button class="btn btn-danger" @onclick="() => DeleteBooking(booking.Id)">Avboka</button>
                        </td> 
                  
                  
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Inga bokningar tillgängliga</p>
    }
}
else
{
    <p>Kundinformation laddas...</p>
}
  <p class="mt-4">Avbokning måste ske senast 48h innan din bokade tid, och kan inte avbokas online utan måste kontakta salongen. Vid avbokning senare än 48h innan din bokade tid debiterar vi dig 50% av behandlingspriset. Vid avbokning senare än 24h innan din bokade tid debiterar vi dig 100% av behandlispriset.</p>
</section>
</div>
@code 

{

public Customer customer;
    [Parameter]
    public string customerId { get; set; }
protected override async Task OnInitializedAsync()
{
    int id = Convert.ToInt32(customerId);
    await LoadCustomer(id);
}


private async Task LoadCustomer(int customerId)
{
    var customerWithBookings = await Http.GetFromJsonAsync<Customer>($"http://localhost:5004/api/Customer/{customerId}");
    customer = customerWithBookings;
    customer.Bookings = customerWithBookings.Bookings; // Uppdatera bokningarna
}

private async Task DeleteBooking(int bookingId)
{
    // Hämta bokningen från kundens bokningar
    var bookingToDelete = customer.Bookings.Values.FirstOrDefault(b => b.Id == bookingId);

    // Beräkna skillnaden i timmar mellan bokningstiden och nuvarande tid
    var hoursUntilBooking = (bookingToDelete.Time.Date - DateTime.UtcNow).TotalHours;

    // Kontrollera om det är mindre än 48 timmar kvar till bokningstiden
    if (hoursUntilBooking < 48)
    {
        await JSRuntime.InvokeVoidAsync("alert", "Du kan inte avboka bokningen eftersom det är mindre än 48 timmar kvar.");
        return;
    }

    var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Är du säker på att du vill radera bokningen?");

    if (confirmed)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5004/api/Booking/{bookingId}");
            response.EnsureSuccessStatusCode();
            await LoadCustomer(customer.Id); // Uppdatera kundinformationen efter att bokningen har raderats
        }
        catch (Exception ex)
        {
            // Hantera eventuella fel
        }
    }
}

 

    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
     public BookingContainer Bookings { get; set; }
    }
public class BookingContainer
{
    [JsonPropertyName("$values")]
    public List<Booking> Values { get; set; }
}

       public class Booking
    {
        public int Id { get; set; }
        public DateTime BookingDateTime { get; set; } = DateTime.Now;
        public string Message { get; set; }
        public bool Status { get; set; } = false;
        public string HairType { get; set; }
        public string HairLength { get; set; }
        public int TimeId { get; set; } // Referens till TimeModel
          public Times Time { get; set; }

        public int HairdresserId { get; set; }

        public int CategoryId { get; set; }

        public int CustomerId { get; set; }
    
    }
    public class Times
    {
        public int Id { get; set; }
        public TimeSpan Time { get; set; }
        public bool Available { get; set; }
        public DateTime Date { get; set; }
    }
 
 

}